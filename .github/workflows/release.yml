name: release
on:
  push:
    # FIXME: comment branch push after testing
    branches:
    - release-workflow
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"
jobs:
  create_release:
    name: create_release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      version: ${{ env.VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }}
          draft: true # FIXME: set to false when testing is done
          prerelease: false

  build_and_release:
    name: Build and Release assets
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, win-msvc, win-gnu, win32-msvc]
        include:
        - build: linux
          os: ubuntu-latest
          rust: nightly
          target: x86_64-unknown-linux-gnu
        - build: macos
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
        - build: win-msvc
          os: windows-2019
          rust: nightly
          target: x86_64-pc-windows-msvc
        - build: win-gnu
          os: windows-2019
          rust: nightly-x86_64-gnu
          target: x86_64-pc-windows-gnu
        - build: win32-msvc
          os: windows-2019
          rust: nightly
          target: i686-pc-windows-msvc

    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --verbose --release

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: rslint-${{ needs.create_release.outputs.version }}-${{ matrix.target }}
          asset_path: ./target/release/rslint
          asset_content_type: application/octet-stream
